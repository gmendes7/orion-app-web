#!/bin/bash

# üßπ Script de Limpeza do Hist√≥rico do Git
# Remove secrets expostos do hist√≥rico completo do reposit√≥rio
# ‚ö†Ô∏è AVISO: Este script reescreve o hist√≥rico do git - use com cuidado!

set -e

echo "üîê Script de Limpeza de Secrets do Git"
echo "======================================"
echo ""
echo "‚ö†Ô∏è  AVISO: Este script ir√° REESCREVER o hist√≥rico do git!"
echo "‚ö†Ô∏è  Isso √© IRREVERS√çVEL e afetar√° todos os commits."
echo "‚ö†Ô∏è  Coordene com sua equipe antes de prosseguir."
echo ""
read -p "Voc√™ tem certeza que deseja continuar? (digite 'yes' para confirmar): " confirm

if [ "$confirm" != "yes" ]; then
    echo "‚ùå Opera√ß√£o cancelada."
    exit 1
fi

# 1. Verificar se estamos em um reposit√≥rio git
if [ ! -d .git ]; then
    echo "‚ùå Erro: N√£o √© um reposit√≥rio git!"
    exit 1
fi

# 2. Criar backup
echo ""
echo "üì¶ Criando backup do reposit√≥rio..."
BACKUP_DIR="../$(basename "$PWD")-backup-$(date +%Y%m%d-%H%M%S)"
cp -r . "$BACKUP_DIR"
echo "‚úÖ Backup criado em: $BACKUP_DIR"

# 3. Verificar se git-filter-repo est√° instalado
if ! command -v git-filter-repo &> /dev/null; then
    echo ""
    echo "‚ùå git-filter-repo n√£o est√° instalado!"
    echo ""
    echo "Instale com:"
    echo "  Ubuntu/Debian: sudo apt install git-filter-repo"
    echo "  macOS: brew install git-filter-repo"
    echo "  Windows: Baixe de https://github.com/newren/git-filter-repo"
    exit 1
fi

# 4. Criar arquivo de substitui√ß√£o
echo ""
echo "üìù Criando arquivo de substitui√ß√µes..."
cat > /tmp/git-replacements.txt << 'EOF'
# OpenAI Keys
sk-proj-33WoDfHqIlab3FZOE3bptudWbGE==>REMOVED_OPENAI_KEY_1
sk-proj-33WoDfqGd0Vz3G8ISUg6xS0yRK==>REMOVED_OPENAI_KEY_2

# Padr√µes gen√©ricos
OPENAI_API_KEY=sk-.*==>OPENAI_API_KEY=REMOVED_FROM_HISTORY
sk-proj-***REMOVED***
sk-***REMOVED***

# Outros secrets (adicione conforme necess√°rio)
# SUPABASE_SERVICE_ROLE_KEY=***REMOVED***
# RESEND_API_KEY=***REMOVED***
EOF

echo "‚úÖ Arquivo de substitui√ß√µes criado"

# 5. Reescrever hist√≥rico
echo ""
echo "üîÑ Reescrevendo hist√≥rico do git (isso pode demorar)..."
echo "   Removendo secrets de todos os commits..."

git filter-repo --replace-text /tmp/git-replacements.txt --force

echo "‚úÖ Hist√≥rico reescrito com sucesso!"

# 6. Limpar arquivo tempor√°rio
rm /tmp/git-replacements.txt

# 7. Verificar se ainda h√° secrets
echo ""
echo "üîç Verificando se ainda h√° secrets no reposit√≥rio..."
if git log --all -S 'sk-proj-' > /dev/null 2>&1; then
    echo "‚ö†Ô∏è  Aten√ß√£o: Ainda h√° ocorr√™ncias de 'sk-proj-' no hist√≥rico."
    echo "   Verifique manualmente com: git log --all -S 'sk-proj-'"
else
    echo "‚úÖ Nenhum secret detectado no hist√≥rico!"
fi

# 8. Instru√ß√µes finais
echo ""
echo "‚úÖ Limpeza conclu√≠da!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "  1. Revogue as chaves expostas no painel da OpenAI"
echo "  2. Crie novas chaves e adicione aos Supabase Secrets"
echo "  3. Teste o reposit√≥rio localmente"
echo "  4. Force push para o remoto (coordenar com equipe!):"
echo "     git push origin --force --all"
echo "     git push origin --force --tags"
echo ""
echo "‚ö†Ô∏è  Lembre-se: Force push afeta todos que t√™m o reposit√≥rio clonado!"
echo "   Instrua a equipe para:"
echo "   1. Fazer backup das mudan√ßas locais"
echo "   2. Clonar o reposit√≥rio novamente: git clone <url>"
echo ""
echo "üì¶ Backup salvo em: $BACKUP_DIR"
